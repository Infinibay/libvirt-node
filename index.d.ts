/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class Machine {
  constructor(config: VmConfig);

  setRam(ram: number): Promise<void>;
  setCpus(cpus: number): Promise<void>;
  addCdrom(sourceFile: string): Promise<void>;
  removeCdrom(): Promise<void>;
  addStorage(size: string, path: string): Promise<void>;
  removeStorage(path: string): Promise<void>;
  powerOn(): Promise<void>;
  powerOff(acpi: boolean): Promise<void>;
  setBootOrder(bootOrder: string[]): Promise<void>;
  deploy(connection: Libvirt): Promise<void>;
  destroy(): Promise<void>;
  static fromDomain(domain: any): Promise<Machine>;
}

export interface VmConfig {
  name: string;
  ram: number;
  disk: string;
  tpm: boolean;
  spice: boolean;
  vnc: boolean;
  osType: string;
  arch: string;
  machineType: string;
  diskImagePath: string;
}

export class Libvirt {
  constructor(connectionString?: string);

  connect(connectionString: string): Promise<void>;
  disconnect(): Promise<void>;
  findMachine(name: string): Promise<Machine>;
  listMachines(): Promise<Machine[]>;
  createMachine(config: VmConfig): Promise<Machine>;
  destroyMachine(name: string): Promise<void>;
}